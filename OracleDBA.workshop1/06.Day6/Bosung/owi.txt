Library cachelock/pin is used to control concurrent access to librarycache objects. Lock Management concurrency, pin management Consistency, lock is for librarycache handle, and pin is for heap.
#########################
[oracle@node01 ~]$ sqlplus sys/oracle@localhost:1521/orcl as sysdba

SQL*Plus: Release 19.0.0.0.0 - Production on Wed Mar 8 13:32:09 2023
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.


Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> grant execute on sys.dbms_lock to hr;

Grant succeeded.
--
[oracle@node01 ~]$ sqlplus hr/hr@localhost:1521/orcl

SQL*Plus: Release 19.0.0.0.0 - Production on Wed Mar 8 13:34:05 2023
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.

Last Successful login time: Wed Mar 08 2023 13:32:51 +07:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> create or replace procedure test_kgllk (l_sleep in boolean , l_compile in boolean)
as
 begin
  if (l_sleep ) then
        sys.dbms_lock.sleep(60);
  elsif (l_compile )  then
        execute immediate 'alter procedure test_kgllk compile';
  end if;
 end;
/  2    3    4    5    6    7    8    9   10

Procedure created.
-- -- gia lap 2 session hr
SQL> set sqlprompt "HR1> "
--
SQL> set sqlprompt "HR2> "
-- Trong HR1 --> execute khong compile
HR1> exec test_kgllk ( true, false);

PL/SQL procedure successfully completed.
-- Trong HR2 --> Compile code không execute
HR2> exec test_kgllk ( false, true);
-- Trong Sys
column h_wait format A20
SELECT s.sid,s.serial#,
waiter.p1raw w_p1r,
holder.event h_wait,
holder.p1raw h_p1r,
holder.p2raw h_p2r,
holder.p3raw h_p2r,
count(s.sid) users_blocked,
sql.hash_value
FROM
gv$sql sql,
gv$session s,
x$kglpn p,
gv$session_wait waiter,
gv$session_wait holder
WHERE
s.sql_hash_value = sql.hash_value and
p.kglpnhdl=waiter.p1raw and
s.saddr=p.kglpnuse and
waiter.event like 'library cache pin' and
holder.sid=s.sid
GROUP BY
s.sid,s.serial#,
waiter.p1raw ,
holder.event ,
holder.p1raw ,
holder.p2raw ,
holder.p3raw ,
sql.hash_value
/
SQL>   2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29
       SID    SERIAL# W_P1R            H_WAIT               H_P1R
---------- ---------- ---------------- -------------------- ----------------
H_P2R            H_P2R            USERS_BLOCKED HASH_VALUE
---------------- ---------------- ------------- ----------
        12      22289 0000000064A62610 library cache pin    0000000064A62610
00000000649D7A18 00011F9D00010003             2  355082405

       460      64936 0000000064A62610 PL/SQL lock timer    00
00               00                           1 4262310792
-- kill session giu lock
-- library cache lock
HR2> exec test_kgllk(false, true);
HR1> exec test_kgllk(false, true);
-- Sys
column h_wait format A20
SELECT s.sid,  
    waiter.p1raw w_p1r,
    waiter.p2raw w_p2r,
    holder.event h_wait,
    holder.p1raw h_p1r,
    holder.p2raw h_p2r,
    count(s.sid) users_blocked,
    sql.hash_value
FROM
    v$sql sql,
    v$session s,
    x$kgllk l,
    v$session_wait waiter,
    v$session_wait holder
WHERE
    s.sql_hash_value = sql.hash_value and
    l.KGLLKADR=waiter.p2raw and
    s.saddr=l.kgllkuse and
    waiter.event like 'library cache lock' and
    holder.sid=s.sid
GROUP BY
    s.sid,
    waiter.p1raw ,
    waiter.p2raw ,
    holder.event ,
    holder.p1raw ,
    holder.p2raw ,
    sql.hash_value
;
--
       SID W_P1R            W_P2R            H_WAIT
---------- ---------------- ---------------- --------------------
H_P1R            H_P2R            USERS_BLOCKED HASH_VALUE
---------------- ---------------- ------------- ----------
       460 0000000064A62610 000000007CFF86E0 library cache lock
0000000064A62610 000000007CFF86E0             1 3502986209
-- Holder lock
select a.sid Holder ,a.SERIAL#,b.INST_ID,b.KGLPNUSE Sesion , b.KGLPNMOD Held, b.KGLPNREQ Req
from x$kglpn b , gv$session a
where b.KGLPNHDL in (select p1raw from v$session_wait
where wait_time=0 and event like 'library cache%')
and b.KGLPNMOD <> 0
and a.saddr=b.kglpnuse ;
    HOLDER    SERIAL#    INST_ID SESION                 HELD        REQ
---------- ---------- ---------- ---------------- ---------- ----------
       451      47458          1 0000000070D19270          2          0
-- alter system kill session '451,47458' immediate;
--
Cause #1: Unshared SQL Due to Literals
Solution: Rewrite the SQL to use bind values
Solution: Use the CURSOR_SHARING initialization parameter
Cause #2: Shared SQL being aged out
Solution: Increase the size of the shared pool
Solution: Use the Automatic Shared Memory Manager (ASMM) to adjust the shared pool size
Solution: Keep (“pin”) frequently used large PL/SQL and cursor objects in the shared pool
Cause #3: Library cache object Invalidations
Solution: Do not perform DDL operations during busy periods
Solution: Do not collect optimizer statistics during busy periods
Solution: Do not perform TRUNCATE operations during busy periods
Cause #4: Objects being compiled across sessions
Solution: Avoid compiling objects in different sessions at the same time or during busy times
Cause #5: Auditing is turned on
Solution: Evaluate the need to audit
Cause #6: Unshared SQL in a RAC environment
Solution: Rewrite the SQL to use bind values
Solution: Use the CURSOR_SHARING initialization parameter
Cause #7: Extensive use of row level triggers
Solution: Evaluate the need for the row trigger
Cause #8: Excessive Amount of Child Cursors
Solution: Inappropriate use of parameter CURSOR_SHARING


